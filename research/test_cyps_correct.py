#!/usr/bin/env python3
"""
–ü–†–ê–í–ò–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SuperCYPsPred API
–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
"""

import urllib.request
import urllib.parse
import json
import time

def test_api_correct_format():
    """–¢–µ—Å—Ç API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"""
    
    print("üî¨ –ü–†–ê–í–ò–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SuperCYPsPred API")
    print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ Python —Å–∫—Ä–∏–ø—Ç–∞")
    print("="*70)
    
    enqueue_url = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_enqueue_new.php"
    retrieve_url = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_retrieve.php"
    
    # –¢–ï–°–¢ 1: Zinc —á–µ—Ä–µ–∑ PubChem –ø–æ–∏—Å–∫ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ)
    print("\nüì§ –¢–ï–°–¢ 1: Zinc —á–µ—Ä–µ–∑ PubChem –ø–æ–∏—Å–∫")
    
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ:
        # input_type: 'name' –∏–ª–∏ 'smiles'
        # input: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ SMILES
        # requested_data: JSON –º–∞—Å—Å–∏–≤ –º–æ–¥–µ–ª–µ–π
        all_models = ["CYP1A2", "CYP2C9", "CYP2C19", "CYP2D6", "CYP3A4"]
        
        data = {
            'input_type': 'name',  # –ö–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
            'input': 'Zinc',
            'requested_data': json.dumps(all_models)  # JSON –º–∞—Å—Å–∏–≤!
        }
        
        encoded_data = urllib.parse.urlencode(data).encode('utf-8')
        
        req = urllib.request.Request(
            enqueue_url,
            data=encoded_data,
            method='POST'
        )
        req.add_header('Content-Type', 'application/x-www-form-urlencoded')
        
        print(f"   URL: {enqueue_url}")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {data}")
        
        with urllib.request.urlopen(req, timeout=30) as response:
            status_code = response.getcode()
            response_text = response.read().decode('utf-8')
            
            print(f"   –°—Ç–∞—Ç—É—Å: {status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response_text}")
            
            if status_code == 200 and not 'ERROR' in response_text:
                task_id = response_text.strip()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏: {task_id}")
                return task_id, "Zinc"
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞")
                return None, None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None, None

def test_aspirin_smiles():
    """–¢–µ—Å—Ç —Å SMILES –∞—Å–ø–∏—Ä–∏–Ω–∞"""
    
    print("\nüì§ –¢–ï–°–¢ 2: –ê—Å–ø–∏—Ä–∏–Ω —á–µ—Ä–µ–∑ SMILES")
    
    enqueue_url = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_enqueue_new.php"
    
    try:
        aspirin_smiles = "CC(=O)OC1=CC=CC=C1C(=O)O"
        all_models = ["CYP1A2", "CYP2C9", "CYP2C19", "CYP2D6", "CYP3A4"]
        
        data = {
            'input_type': 'smiles',  # SMILES –≤–º–µ—Å—Ç–æ name
            'input': aspirin_smiles,
            'requested_data': json.dumps(all_models)
        }
        
        encoded_data = urllib.parse.urlencode(data).encode('utf-8')
        
        req = urllib.request.Request(
            enqueue_url,
            data=encoded_data,
            method='POST'
        )
        req.add_header('Content-Type', 'application/x-www-form-urlencoded')
        
        print(f"   SMILES: {aspirin_smiles}")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: input_type=smiles, requested_data={json.dumps(all_models)}")
        
        with urllib.request.urlopen(req, timeout=30) as response:
            status_code = response.getcode()
            response_text = response.read().decode('utf-8')
            
            print(f"   –°—Ç–∞—Ç—É—Å: {status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response_text}")
            
            if status_code == 200 and not 'ERROR' in response_text:
                task_id = response_text.strip()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–ª—è –∞—Å–ø–∏—Ä–∏–Ω–∞: {task_id}")
                return task_id, "Aspirin"
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞")
                return None, None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None, None

def test_curcumin():
    """–¢–µ—Å—Ç —Å –∫—É—Ä–∫—É–º–∏–Ω–æ–º"""
    
    print("\nüì§ –¢–ï–°–¢ 3: Curcumin —á–µ—Ä–µ–∑ PubChem")
    
    enqueue_url = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_enqueue_new.php"
    
    try:
        all_models = ["CYP1A2", "CYP2C9", "CYP2C19", "CYP2D6", "CYP3A4"]
        
        data = {
            'input_type': 'name',
            'input': 'Curcumin',
            'requested_data': json.dumps(all_models)
        }
        
        encoded_data = urllib.parse.urlencode(data).encode('utf-8')
        
        req = urllib.request.Request(
            enqueue_url,
            data=encoded_data,
            method='POST'
        )
        req.add_header('Content-Type', 'application/x-www-form-urlencoded')
        
        print(f"   –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: Curcumin")
        
        with urllib.request.urlopen(req, timeout=30) as response:
            status_code = response.getcode()
            response_text = response.read().decode('utf-8')
            
            print(f"   –°—Ç–∞—Ç—É—Å: {status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response_text}")
            
            if status_code == 200 and not 'ERROR' in response_text:
                task_id = response_text.strip()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–ª—è –∫—É—Ä–∫—É–º–∏–Ω–∞: {task_id}")
                return task_id, "Curcumin"
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞")
                return None, None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None, None

def retrieve_results(task_id, compound_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ ID –∑–∞–¥–∞—á–∏ (–∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–∞–º–µ—Ç—Ä 'id' –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)"""
    
    print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {compound_name} (ID: {task_id})")
    
    retrieve_url = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_retrieve.php"
    max_attempts = 20  # 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
    
    for attempt in range(1, max_attempts + 1):
        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}")
        
        try:
            # –í –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä 'id', –∞ –Ω–µ 'task_id'!
            data = {'id': task_id}  # –í–ê–ñ–ù–û: 'id', –∞ –Ω–µ 'task_id'
            encoded_data = urllib.parse.urlencode(data).encode('utf-8')
            
            req = urllib.request.Request(
                retrieve_url,
                data=encoded_data,
                method='POST'
            )
            req.add_header('Content-Type', 'application/x-www-form-urlencoded')
            
            with urllib.request.urlopen(req, timeout=30) as response:
                status_code = response.getcode()
                response_text = response.read().decode('utf-8')
                
                print(f"   –°—Ç–∞—Ç—É—Å: {status_code}")
                
                if status_code == 200:
                    if response_text == "":
                        print("   ‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    else:
                        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã!
                        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã!")
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º CSV —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
                        csv_url = f"http://insilico-cyp.charite.de/SuperCYPsPred/csv/{task_id}_result.csv"
                        print(f"üìä –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV: {csv_url}")
                        
                        try:
                            with urllib.request.urlopen(csv_url, timeout=30) as csv_response:
                                csv_content = csv_response.read().decode('utf-8')
                                
                                print(f"‚úÖ CSV —Å–∫–∞—á–∞–Ω –¥–ª—è {compound_name}")
                                print(f"   –†–∞–∑–º–µ—Ä: {len(csv_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                                
                                # –ê–Ω–∞–ª–∏–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                                analyze_cyp_results(compound_name, csv_content)
                                
                                filename = f"{compound_name.lower()}_cyp_results.csv"
                                with open(filename, 'w') as f:
                                    f.write(csv_content)
                                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {filename}")
                                
                                return csv_content
                                
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV: {e}")
                            
                elif status_code == 404:
                    print("   ‚è≥ –í—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã...")
                    
                else:
                    print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response_text[:200]}")
            
            # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ
            if attempt < max_attempts:
                time.sleep(30)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            if attempt < max_attempts:
                time.sleep(30)
    
    print(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è {compound_name}")
    return None

def analyze_cyp_results(compound_name, csv_content):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ CYP —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–õ–Ø {compound_name.upper()}:")
    print("=" * 60)
    
    try:
        lines = csv_content.strip().split('\\n')  # –£—á–∏—Ç—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if len(lines) < 2:
            lines = csv_content.strip().split('\n')  # –û–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
        
        if len(lines) < 2:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ CSV")
            print(f"–°—ã—Ä–æ–π CSV (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(csv_content[:300])
            return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
        headers = [h.strip() for h in lines[0].split(',')]
        data_line = [d.strip() for d in lines[1].split(',')]
        
        print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏ ({len(headers)}): {', '.join(headers)}")
        print(f"   –î–∞–Ω–Ω—ã–µ ({len(data_line)}): {', '.join(data_line[:5])}{'...' if len(data_line) > 5 else ''}")
        
        # –ü–æ–∏—Å–∫ CYP –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        print(f"\nüß¨ CYP –ü–†–û–§–ò–õ–¨ –ò–ù–ì–ò–ë–ò–†–û–í–ê–ù–ò–Ø:")
        print("-" * 50)
        
        cyp_data = {}
        cyp_found = False
        
        for i, header in enumerate(headers):
            if i < len(data_line) and 'CYP' in header.upper():
                try:
                    value = float(data_line[i])
                    cyp_data[header] = value
                    cyp_found = True
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
                    if value >= 0.8:
                        risk = "üî¥ –û–ß–ï–ù–¨ –í–´–°–û–ö–ò–ô"
                        desc = "–ü–æ—á—Ç–∏ –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ñ–µ—Ä–º–µ–Ω—Ç"
                    elif value >= 0.6:
                        risk = "üü† –í–´–°–û–ö–ò–ô"
                        desc = "–í–µ—Ä–æ—è—Ç–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ"
                    elif value >= 0.4:
                        risk = "üü° –°–†–ï–î–ù–ò–ô"
                        desc = "–£–º–µ—Ä–µ–Ω–Ω–æ–µ –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ"
                    elif value >= 0.2:
                        risk = "üü¢ –ù–ò–ó–ö–ò–ô"
                        desc = "–°–ª–∞–±–æ–µ –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ"
                    else:
                        risk = "‚ö™ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô"
                        desc = "–ü–æ—á—Ç–∏ –Ω–µ—Ç –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è"
                    
                    print(f"   {header:8} | {value:6.3f} | {risk:15} | {desc}")
                    
                except (ValueError, IndexError):
                    print(f"   {header:8} | ERROR  | –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        if not cyp_found:
            print("‚ùå CYP –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ CSV")
            return
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
        print(f"\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print("-" * 50)
        
        if cyp_data:
            max_value = max(cyp_data.values())
            max_cyp = max(cyp_data, key=cyp_data.get)
            avg_value = sum(cyp_data.values()) / len(cyp_data)
            
            high_risk_cyps = [cyp for cyp, val in cyp_data.items() if val >= 0.6]
            medium_risk_cyps = [cyp for cyp, val in cyp_data.items() if 0.4 <= val < 0.6]
            
            print(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ: {max_value:.3f} ({max_cyp})")
            print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ: {avg_value:.3f}")
            print(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: {len(high_risk_cyps)} —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤")
            print(f"‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: {len(medium_risk_cyps)} —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤")
            
            # –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print(f"\nüíä –ö–õ–ò–ù–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("-" * 50)
            
            if max_value >= 0.8:
                print(f"üö® –í–ù–ò–ú–ê–ù–ò–ï: {compound_name} –º–æ–∂–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ {max_cyp}")
                print(f"   –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞")
            elif max_value >= 0.6:
                print(f"‚ö†Ô∏è –û–°–¢–û–†–û–ñ–ù–û: {compound_name} –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ {max_cyp}")
                print(f"   –í–æ–∑–º–æ–∂–Ω—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            elif max_value >= 0.4:
                print(f"‚ÑπÔ∏è –£–ú–ï–†–ï–ù–ù–û: {compound_name} –º–æ–∂–µ—Ç —Å–ª–∞–±–æ –≤–ª–∏—è—Ç—å –Ω–∞ {max_cyp}")
                print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
            else:
                print(f"‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û: {compound_name} –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ CYP —Ñ–µ—Ä–º–µ–Ω—Ç—ã")
                print(f"   –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
            
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–µ—Ä–º–µ–Ω—Ç—ã
            if high_risk_cyps:
                print(f"\nüéØ –§–ï–†–ú–ï–ù–¢–´ –í–´–°–û–ö–û–ì–û –†–ò–°–ö–ê:")
                for cyp in high_risk_cyps:
                    print(f"   ‚Ä¢ {cyp}: {cyp_data[cyp]:.3f}")
        
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        print(f"–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
        print(csv_content[:500])

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    print("üî¨ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SuperCYPsPred API")
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º 3 —Ä–∞–∑–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    print("="*80)
    
    results = {}
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–¢–µ—Å—Ç 1: Zinc", test_api_correct_format),
        ("–¢–µ—Å—Ç 2: Aspirin", test_aspirin_smiles),
        ("–¢–µ—Å—Ç 3: Curcumin", test_curcumin)
    ]
    
    for test_name, test_func in tests:
        print(f"\n{'='*80}")
        print(f"üß™ {test_name}")
        print(f"{'='*80}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        task_id, compound_name = test_func()
        
        if task_id and compound_name:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result = retrieve_results(task_id, compound_name)
            if result:
                results[compound_name] = result
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        if test_func != tests[-1][1]:  # –ù–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
            print(f"\n‚è∏Ô∏è –ü–∞—É–∑–∞ 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...")
            time.sleep(60)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*80}")
    print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'='*80}")
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(results)} –∏–∑ 3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    
    for compound in results.keys():
        print(f"   ‚Ä¢ {compound}: ‚úÖ CYP –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    failed_count = 3 - len(results)
    if failed_count > 0:
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {failed_count}")
    
    if results:
        print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for compound in results.keys():
            filename = f"{compound.lower()}_cyp_results.csv"
            print(f"   ‚Ä¢ {filename}")
    
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SuperCYPsPred API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è CYP –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
    
    return results

if __name__ == "__main__":
    main()