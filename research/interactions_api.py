#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ë–ê–î–æ–≤
–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º VitaPlus
"""

import json
from flask import Flask, jsonify, request
from flask_cors import CORS
from typing import List, Dict

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∏—Ç—å CORS –¥–ª—è React Native

class InteractionsAPI:
    def __init__(self, database_file: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        with open(database_file, 'r', encoding='utf-8') as f:
            self.interactions = json.load(f)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self.supplement_index = {}
        for interaction in self.interactions:
            supplement = interaction['supplement'].lower()
            if supplement not in self.supplement_index:
                self.supplement_index[supplement] = []
            self.supplement_index[supplement].append(interaction)
    
    def check_interactions(self, supplements: List[str]) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –º–µ–∂–¥—É —Å–ø–∏—Å–∫–æ–º –ë–ê–î–æ–≤"""
        found_interactions = []
        warnings = []
        
        for supplement in supplements:
            supplement_lower = supplement.lower()
            
            # –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ
            matching_keys = [key for key in self.supplement_index.keys() 
                           if supplement_lower in key or key in supplement_lower]
            
            for key in matching_keys:
                for interaction in self.supplement_index[key]:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –¥—Ä—É–≥–∏–º–∏ –ë–ê–î–∞–º–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
                    for other_supplement in supplements:
                        if (other_supplement.lower() in interaction['interacts_with'].lower() or
                            interaction['severity'] == 'high'):
                            found_interactions.append(interaction)
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
                    if interaction['interaction_type'] == 'negative':
                        warnings.append({
                            'supplement': interaction['supplement'],
                            'warning': interaction['effect'][:100] + "...",
                            'severity': interaction['severity']
                        })
        
        return {
            'interactions_found': len(found_interactions),
            'interactions': found_interactions[:10],  # –ü–µ—Ä–≤—ã–µ 10
            'warnings': warnings[:5],  # –ü–µ—Ä–≤—ã–µ 5 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            'high_severity_count': sum(1 for i in found_interactions if i['severity'] == 'high')
        }
    
    def get_supplement_info(self, supplement_name: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ë–ê–î–µ"""
        supplement_lower = supplement_name.lower()
        matching_interactions = []
        
        for key, interactions in self.supplement_index.items():
            if supplement_lower in key or key in supplement_lower:
                matching_interactions.extend(interactions)
        
        if not matching_interactions:
            return {'found': False, 'message': '–ë–ê–î –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'}
        
        total = len(matching_interactions)
        negative = sum(1 for i in matching_interactions if i['interaction_type'] == 'negative')
        positive = sum(1 for i in matching_interactions if i['interaction_type'] == 'positive')
        high_severity = sum(1 for i in matching_interactions if i['severity'] == 'high')
        
        return {
            'found': True,
            'supplement': supplement_name,
            'total_interactions': total,
            'negative_interactions': negative,
            'positive_interactions': positive,
            'high_severity_interactions': high_severity,
            'sample_interactions': matching_interactions[:5]
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
api = InteractionsAPI('/Users/yurygagarin/Code/1/vitaplus/research/interactions_database.json')

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return jsonify({
        'status': 'ok',
        'total_interactions': len(api.interactions),
        'total_supplements': len(api.supplement_index)
    })

@app.route('/api/check-interactions', methods=['POST'])
def check_interactions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –º–µ–∂–¥—É –ë–ê–î–∞–º–∏"""
    data = request.get_json()
    
    if not data or 'supplements' not in data:
        return jsonify({'error': '–£–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ë–ê–î–æ–≤ –≤ –ø–æ–ª–µ supplements'}), 400
    
    supplements = data['supplements']
    if not isinstance(supplements, list) or len(supplements) == 0:
        return jsonify({'error': 'supplements –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º'}), 400
    
    result = api.check_interactions(supplements)
    return jsonify(result)

@app.route('/api/supplement/<supplement_name>', methods=['GET'])
def get_supplement_info(supplement_name: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–ê–î–µ"""
    result = api.get_supplement_info(supplement_name)
    return jsonify(result)

@app.route('/api/search', methods=['GET'])
def search_supplements():
    """–ü–æ–∏—Å–∫ –ë–ê–î–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    query = request.args.get('q', '').lower()
    if not query:
        return jsonify({'error': '–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞ q'}), 400
    
    matching_supplements = []
    for supplement_name in api.supplement_index.keys():
        if query in supplement_name:
            matching_supplements.append(supplement_name.title())
    
    return jsonify({
        'query': query,
        'matches': list(set(matching_supplements))[:20]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –ø–µ—Ä–≤—ã–µ 20
    })

@app.route('/api/supplements', methods=['GET'])
def list_all_supplements():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ë–ê–î–æ–≤ –≤ –±–∞–∑–µ"""
    supplements = list(set(api.supplement_index.keys()))
    supplements = [s.title() for s in sorted(supplements)]
    
    return jsonify({
        'total_count': len(supplements),
        'supplements': supplements
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ë–ê–î–æ–≤...")
    print("üìç API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("GET  /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
    print("POST /api/check-interactions - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
    print("GET  /api/supplement/<name> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–ê–î–µ")
    print("GET  /api/search?q=<query> - –ø–æ–∏—Å–∫ –ë–ê–î–æ–≤")
    print("GET  /api/supplements - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ë–ê–î–æ–≤")
    print("\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("curl -X POST http://localhost:5000/api/check-interactions \\")
    print('     -H "Content-Type: application/json" \\')
    print('     -d \'{"supplements": ["Zinc", "Calcium", "Iron"]}\'')
    
    app.run(debug=True, host='0.0.0.0', port=5000)