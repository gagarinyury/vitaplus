#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ë–ê–î–æ–≤
–ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import json
from typing import List, Dict, Optional

class InteractionSearcher:
    def __init__(self, database_file: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        with open(database_file, 'r', encoding='utf-8') as f:
            self.interactions = json.load(f)
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.interactions)} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")

    def search_by_supplement(self, supplement_name: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ë–ê–î–∞"""
        results = []
        supplement_lower = supplement_name.lower()
        
        for interaction in self.interactions:
            if supplement_lower in interaction['supplement'].lower():
                results.append(interaction)
        
        return results

    def search_high_severity(self) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –≤—ã—Å–æ–∫–æ–π —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏"""
        return [i for i in self.interactions if i['severity'] == 'high']

    def search_negative_interactions(self) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        return [i for i in self.interactions if i['interaction_type'] == 'negative']

    def search_by_keyword(self, keyword: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ —ç—Ñ—Ñ–µ–∫—Ç–µ"""
        results = []
        keyword_lower = keyword.lower()
        
        for interaction in self.interactions:
            if (keyword_lower in interaction['effect'].lower() or 
                keyword_lower in interaction['interacts_with'].lower()):
                results.append(interaction)
        
        return results

    def get_supplement_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ë–ê–î–∞–º"""
        stats = {}
        for interaction in self.interactions:
            supplement = interaction['supplement']
            if supplement not in stats:
                stats[supplement] = {
                    'total': 0,
                    'negative': 0,
                    'positive': 0,
                    'neutral': 0,
                    'high_severity': 0
                }
            
            stats[supplement]['total'] += 1
            interaction_type = interaction['interaction_type']
            if interaction_type in stats[supplement]:
                stats[supplement][interaction_type] += 1
            if interaction['severity'] == 'high':
                stats[supplement]['high_severity'] += 1
        
        return stats

    def format_interaction(self, interaction: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        return f"""
üìã {interaction['supplement']} ‚ö° {interaction['interacts_with']}
   –¢–∏–ø: {interaction['interaction_type']} | –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {interaction['severity']}
   –≠—Ñ—Ñ–µ–∫—Ç: {interaction['effect'][:100]}...
   –ú–µ—Ö–∞–Ω–∏–∑–º: {interaction['mechanism']}
   –î–æ–∑–∏—Ä–æ–≤–∫–∞: {interaction['dosage_info']}
   –ò—Å—Ç–æ—á–Ω–∏–∫: {interaction['source_file']}
   {"="*60}"""

    def display_results(self, results: List[Dict], title: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        print(f"\nüîç {title}")
        print(f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π\n")
        
        for i, interaction in enumerate(results[:10]):  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10
            print(f"{i+1}. {self.format_interaction(interaction)}")
        
        if len(results) > 10:
            print(f"\n... –∏ –µ—â–µ {len(results) - 10} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞"""
    searcher = InteractionSearcher("/Users/yurygagarin/Code/1/vitaplus/research/interactions_database.json")
    
    # –ü–æ–∏—Å–∫ –ø–æ —Ü–∏–Ω–∫—É
    zinc_interactions = searcher.search_by_supplement("Zinc")
    searcher.display_results(zinc_interactions, "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ü–∏–Ω–∫–∞")
    
    # –ü–æ–∏—Å–∫ –≤—ã—Å–æ–∫–æ–π —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
    high_severity = searcher.search_high_severity()
    searcher.display_results(high_severity, "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤—ã—Å–æ–∫–æ–π —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = searcher.get_supplement_stats()
    print("\nüìä –¢–û–ü-10 –ë–ê–î–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:")
    sorted_stats = sorted(stats.items(), key=lambda x: x[1]['total'], reverse=True)[:10]
    
    for supplement, data in sorted_stats:
        print(f"{supplement}: {data['total']} –≤—Å–µ–≥–æ ({data['negative']} –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö, {data['high_severity']} –≤—ã—Å–æ–∫–æ–π —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏)")

if __name__ == "__main__":
    main()