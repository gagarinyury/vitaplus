#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SuperCYPsPred API
–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API
"""

import urllib.request
import urllib.parse
import time

def test_api_with_correct_params():
    """–¢–µ—Å—Ç API —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    print("üî¨ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SuperCYPsPred API")
    print("="*60)
    
    enqueue_url = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_enqueue_new.php"
    retrieve_url = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_retrieve.php"
    
    # –¢–ï–°–¢ 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Zinc
    print("\nüì§ –¢–ï–°–¢ 1: Zinc —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    
    try:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏–∑ –æ—à–∏–±–∫–∏ –≤–∏–¥–∏–º, —á—Ç–æ –Ω—É–∂–Ω–æ compound_name)
        data = {
            'input': 'Zinc',
            'input_type': 'compound_name',  # –ò–∑–º–µ–Ω–∏–ª–∏ —Å 'name' –Ω–∞ 'compound_name'
            'models': 'ALL_MODELS'
        }
        
        encoded_data = urllib.parse.urlencode(data).encode('utf-8')
        
        req = urllib.request.Request(
            enqueue_url,
            data=encoded_data,
            method='POST'
        )
        req.add_header('Content-Type', 'application/x-www-form-urlencoded')
        
        print(f"   URL: {enqueue_url}")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {data}")
        
        with urllib.request.urlopen(req, timeout=30) as response:
            status_code = response.getcode()
            response_text = response.read().decode('utf-8')
            
            print(f"   –°—Ç–∞—Ç—É—Å: {status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response_text}")
            
            if status_code == 200 and not 'ERROR' in response_text:
                task_id = response_text.strip()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏: {task_id}")
                return task_id, retrieve_url
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞")
                return None, None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None, None

def test_smiles_input():
    """–¢–µ—Å—Ç —Å SMILES —Å—Ç—Ä–æ–∫–æ–π"""
    
    print("\nüì§ –¢–ï–°–¢ 2: –ê—Å–ø–∏—Ä–∏–Ω —á–µ—Ä–µ–∑ SMILES")
    
    enqueue_url = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_enqueue_new.php"
    
    try:
        # SMILES —Å—Ç—Ä–æ–∫–∞ –∞—Å–ø–∏—Ä–∏–Ω–∞
        aspirin_smiles = "CC(=O)OC1=CC=CC=C1C(=O)O"
        
        data = {
            'input': aspirin_smiles,
            'input_type': 'smiles_string',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º smiles_string
            'models': 'ALL_MODELS'
        }
        
        encoded_data = urllib.parse.urlencode(data).encode('utf-8')
        
        req = urllib.request.Request(
            enqueue_url,
            data=encoded_data,
            method='POST'
        )
        req.add_header('Content-Type', 'application/x-www-form-urlencoded')
        
        print(f"   SMILES: {aspirin_smiles}")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {data}")
        
        with urllib.request.urlopen(req, timeout=30) as response:
            status_code = response.getcode()
            response_text = response.read().decode('utf-8')
            
            print(f"   –°—Ç–∞—Ç—É—Å: {status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response_text}")
            
            if status_code == 200 and not 'ERROR' in response_text:
                task_id = response_text.strip()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–ª—è –∞—Å–ø–∏—Ä–∏–Ω–∞: {task_id}")
                return task_id
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞")
                return None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def check_and_download_results(task_id, retrieve_url, compound_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {compound_name} (ID: {task_id})")
    
    max_attempts = 20  # 10 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
    
    for attempt in range(1, max_attempts + 1):
        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}")
        
        try:
            data = {'task_id': task_id}
            encoded_data = urllib.parse.urlencode(data).encode('utf-8')
            
            req = urllib.request.Request(
                retrieve_url,
                data=encoded_data,
                method='POST'
            )
            req.add_header('Content-Type', 'application/x-www-form-urlencoded')
            
            with urllib.request.urlopen(req, timeout=30) as response:
                status_code = response.getcode()
                response_text = response.read().decode('utf-8')
                
                print(f"   –°—Ç–∞—Ç—É—Å: {status_code}")
                
                if status_code == 200:
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã!
                    csv_url = response_text.strip()
                    print(f"‚úÖ CSV –≥–æ—Ç–æ–≤: {csv_url}")
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º CSV
                    try:
                        with urllib.request.urlopen(csv_url, timeout=30) as csv_response:
                            csv_content = csv_response.read().decode('utf-8')
                            
                            print(f"üìä CSV —Å–∫–∞—á–∞–Ω –¥–ª—è {compound_name}")
                            print(f"   –†–∞–∑–º–µ—Ä: {len(csv_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                            
                            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            analyze_csv_results(compound_name, csv_content)
                            
                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                            filename = f"{compound_name.lower().replace(' ', '_')}_cyp_results.csv"
                            with open(filename, 'w') as f:
                                f.write(csv_content)
                            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {filename}")
                            
                            return csv_content
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV: {e}")
                        return None
                        
                elif status_code == 404:
                    print("   ‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...")
                    
                else:
                    print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response_text[:200]}")
            
            # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
            if attempt < max_attempts:
                time.sleep(30)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            if attempt < max_attempts:
                time.sleep(30)
    
    print(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è {compound_name}")
    return None

def analyze_csv_results(compound_name, csv_content):
    """–ê–Ω–∞–ª–∏–∑ CSV —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –î–õ–Ø {compound_name.upper()}:")
    print("-" * 50)
    
    try:
        lines = csv_content.strip().split('\n')
        
        if len(lines) < 2:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ CSV")
            return
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
        headers = [h.strip() for h in lines[0].split(',')]
        data_line = [d.strip() for d in lines[1].split(',')]
        
        print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(headers)}")
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {', '.join(data_line)}")
        
        # –ê–Ω–∞–ª–∏–∑ CYP –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        print(f"\nüß¨ CYP –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø:")
        
        cyp_predictions = {}
        cyp_enzymes = ['CYP1A2', 'CYP2C9', 'CYP2C19', 'CYP2D6', 'CYP3A4']
        
        for i, header in enumerate(headers):
            if header in cyp_enzymes and i < len(data_line):
                try:
                    value = float(data_line[i])
                    cyp_predictions[header] = value
                    
                    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∏—Å–∫–∞
                    if value >= 0.7:
                        risk = "üî¥ –í–´–°–û–ö–ò–ô"
                        risk_desc = "–°–µ—Ä—å–µ–∑–Ω–æ–µ –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ"
                    elif value >= 0.4:
                        risk = "üü° –°–†–ï–î–ù–ò–ô"
                        risk_desc = "–£–º–µ—Ä–µ–Ω–Ω–æ–µ –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ"
                    else:
                        risk = "üü¢ –ù–ò–ó–ö–ò–ô"
                        risk_desc = "–°–ª–∞–±–æ–µ –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ"
                    
                    print(f"   {header}: {value:.3f} ({risk}) - {risk_desc}")
                    
                except ValueError:
                    print(f"   {header}: {data_line[i]} (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
        if cyp_predictions:
            max_value = max(cyp_predictions.values())
            max_cyp = max(cyp_predictions, key=cyp_predictions.get)
            avg_value = sum(cyp_predictions.values()) / len(cyp_predictions)
            
            print(f"\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ: {max_value:.3f} ({max_cyp})")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ: {avg_value:.3f}")
            
            # –û–±—â–∏–π —Ä–∏—Å–∫
            if max_value >= 0.7:
                print(f"   ‚ö†Ô∏è –í–´–°–û–ö–ò–ô –†–ò–°–ö: {compound_name} –º–æ–∂–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ {max_cyp}")
                print(f"   üíä –í–æ–∑–º–æ–∂–Ω—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏, –º–µ—Ç–∞–±–æ–ª–∏–∑–∏—Ä—É–µ–º—ã–º–∏ {max_cyp}")
            elif max_value >= 0.4:
                print(f"   ‚ö†Ô∏è –£–ú–ï–†–ï–ù–ù–´–ô –†–ò–°–ö: {compound_name} –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ {max_cyp}")
                print(f"   üíä –í–æ–∑–º–æ–∂–Ω—ã —Å–ª–∞–±—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏")
            else:
                print(f"   ‚úÖ –ù–ò–ó–ö–ò–ô –†–ò–°–ö: {compound_name} –≤–µ—Ä–æ—è—Ç–Ω–æ –±–µ–∑–æ–ø–∞—Å–µ–Ω –≤ –ø–ª–∞–Ω–µ CYP –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
        
        print("-" * 50)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        print(f"–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ CSV (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):\n{csv_content[:500]}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üî¨ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SuperCYPsPred API")
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º 2 —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞")
    print("="*80)
    
    results = {}
    
    # –¢–µ—Å—Ç 1: Zinc —á–µ—Ä–µ–∑ compound_name
    task_id, retrieve_url = test_api_with_correct_params()
    if task_id:
        result1 = check_and_download_results(task_id, retrieve_url, "Zinc")
        if result1:
            results["Zinc"] = result1
    
    print("\n" + "="*80)
    
    # –¢–µ—Å—Ç 2: –ê—Å–ø–∏—Ä–∏–Ω —á–µ—Ä–µ–∑ SMILES
    aspirin_task_id = test_smiles_input()
    if aspirin_task_id:
        result2 = check_and_download_results(aspirin_task_id, retrieve_url, "Aspirin")
        if result2:
            results["Aspirin"] = result2
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*80)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*80)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(results)} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    
    for compound in results.keys():
        print(f"   ‚Ä¢ {compound}: ‚úÖ CYP –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω")
    
    if not results:
        print("‚ùå –ù–∏ –æ–¥–∏–Ω —Ç–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
        print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
        print("   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ API")
        print("   ‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞")
    
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return results

if __name__ == "__main__":
    main()