#!/usr/bin/env python3
"""
–†–ï–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SuperCYPsPred API
–î–µ–ª–∞–µ–º 3 –∑–∞–ø—Ä–æ—Å–∞ –∫ API –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
"""

import requests
import time
import json
import csv
from io import StringIO

class SuperCYPsTester:
    def __init__(self):
        self.enqueue_url = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_enqueue_new.php"
        self.retrieve_url = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_retrieve.php"
        self.max_wait_minutes = 10  # –ú–∞–∫—Å–∏–º—É–º 10 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
        
    def test_supplement(self, supplement_name, test_number):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ë–ê–î–∞"""
        print(f"\n{'='*60}")
        print(f"üß™ –¢–ï–°–¢ {test_number}: {supplement_name}")
        print(f"{'='*60}")
        
        try:
            # –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è: {supplement_name}")
            task_id = self.enqueue_request(supplement_name)
            
            if not task_id:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–¥–∞—á–∏")
                return None
                
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω ID –∑–∞–¥–∞—á–∏: {task_id}")
            
            # –®–∞–≥ 2: –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            csv_content = self.wait_for_results(task_id)
            
            if csv_content:
                print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!")
                self.analyze_results(supplement_name, csv_content)
                return csv_content
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {supplement_name}: {e}")
            return None
    
    def enqueue_request(self, supplement_name):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        data = {
            'input': supplement_name,
            'input_type': 'name',
            'models': 'ALL_MODELS'
        }
        
        try:
            response = requests.post(self.enqueue_url, data=data, timeout=30)
            print(f"   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                task_id = response.text.strip()
                return task_id
            elif response.status_code == 429:
                print("   ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
                return None
            elif response.status_code == 403:
                print("   ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–Ω–µ–≤–Ω–∞—è –∫–≤–æ—Ç–∞")
                return None
            else:
                print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return None
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def wait_for_results(self, task_id):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        max_attempts = self.max_wait_minutes * 6  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫
        
        for attempt in range(1, max_attempts + 1):
            print(f"   üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ {attempt}/{max_attempts} (–ø—Ä–æ—à–ª–æ {attempt*10} —Å–µ–∫)")
            
            try:
                data = {'task_id': task_id}
                response = requests.post(self.retrieve_url, data=data, timeout=30)
                
                if response.status_code == 200:
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã!
                    csv_url = response.text.strip()
                    print(f"   ‚úÖ CSV –≥–æ—Ç–æ–≤: {csv_url}")
                    return self.download_csv(csv_url)
                    
                elif response.status_code == 404:
                    # –ï—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
                    if attempt % 6 == 0:  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                        print(f"   ‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è ({attempt//6} –º–∏–Ω)")
                    
                elif response.status_code == 429:
                    print("   ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –∂–¥–µ–º...")
                    
                else:
                    print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
                
                # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                time.sleep(10)
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
                time.sleep(10)
        
        print(f"   ‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ({self.max_wait_minutes} –º–∏–Ω—É—Ç)")
        return None
    
    def download_csv(self, csv_url):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞"""
        try:
            response = requests.get(csv_url, timeout=30)
            if response.status_code == 200:
                content = response.text
                print(f"   üìä CSV —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                return content
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV: {response.status_code}")
                return None
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None
    
    def analyze_results(self, supplement_name, csv_content):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ CSV"""
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –î–õ–Ø {supplement_name}:")
        print("-" * 50)
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ CSV
            lines = csv_content.strip().split('\n')
            
            if len(lines) < 2:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ CSV")
                return
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [h.strip() for h in lines[0].split(',')]
            print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(headers)}")
            
            # –î–∞–Ω–Ω—ã–µ
            data_line = [d.strip() for d in lines[1].split(',')]
            print(f"üìä –î–∞–Ω–Ω—ã–µ: {', '.join(data_line)}")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            print(f"\nüß¨ CYP –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø:")
            
            cyp_enzymes = ['CYP1A2', 'CYP2C9', 'CYP2C19', 'CYP2D6', 'CYP3A4']
            predictions = {}
            
            for i, header in enumerate(headers[1:], 1):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–Ω–∞–∑–≤–∞–Ω–∏–µ)
                if i < len(data_line) and header in cyp_enzymes:
                    try:
                        value = float(data_line[i])
                        predictions[header] = value
                        
                        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
                        if value >= 0.7:
                            risk = "üî¥ –í–´–°–û–ö–ò–ô"
                        elif value >= 0.4:
                            risk = "üü° –°–†–ï–î–ù–ò–ô"
                        else:
                            risk = "üü¢ –ù–ò–ó–ö–ò–ô"
                        
                        print(f"   {header}: {value:.3f} ({risk} —Ä–∏—Å–∫)")
                        
                    except ValueError:
                        print(f"   {header}: {data_line[i]} (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)")
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
            if predictions:
                max_value = max(predictions.values())
                max_cyp = max(predictions, key=predictions.get)
                
                print(f"\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:")
                print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ: {max_value:.3f} ({max_cyp})")
                
                if max_value >= 0.7:
                    print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ {max_cyp}")
                elif max_value >= 0.4:
                    print(f"   ‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ {max_cyp}")
                else:
                    print(f"   ‚úÖ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ CYP –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            filename = f"cyp_results_{supplement_name.lower().replace(' ', '_')}.csv"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(csv_content)
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ CSV:\n{csv_content[:500]}...")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SuperCYPsPred API")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º 3 —Ä–∞–∑–Ω—ã—Ö –ë–ê–î–∞ –Ω–∞ CYP –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")
    print("="*80)
    
    tester = SuperCYPsTester()
    
    # 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ë–ê–î–∞
    test_supplements = [
        "Zinc",           # –ú–∏–Ω–µ—Ä–∞–ª
        "Vitamin D",      # –í–∏—Ç–∞–º–∏–Ω  
        "Curcumin"        # –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç
    ]
    
    results = {}
    
    for i, supplement in enumerate(test_supplements, 1):
        result = tester.test_supplement(supplement, i)
        if result:
            results[supplement] = result
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if i < len(test_supplements):
            print(f"\n‚è∏Ô∏è –ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...")
            time.sleep(30)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*80}")
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*80}")
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(results)} –∏–∑ {len(test_supplements)} –ë–ê–î–æ–≤")
    
    for supplement, result in results.items():
        print(f"   ‚Ä¢ {supplement}: ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
    
    failed = set(test_supplements) - set(results.keys())
    for supplement in failed:
        print(f"   ‚Ä¢ {supplement}: ‚ùå –ù–µ—É–¥–∞—á–∞")
    
    if results:
        print(f"\nüìÅ –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for supplement in results.keys():
            filename = f"cyp_results_{supplement.lower().replace(' ', '_')}.csv"
            print(f"   ‚Ä¢ {filename}")
    
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()