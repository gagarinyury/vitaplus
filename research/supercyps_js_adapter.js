/**
 * SuperCYPsPred API - JavaScript/TypeScript –∞–¥–∞–ø—Ç–∞—Ü–∏—è
 * –ü–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python API –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ React Native / Node.js
 */

class SuperCYPsPredAPI {
    constructor() {
        // API –≠–ù–î–ü–û–ò–ù–¢–´
        this.enqueueUrl = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_enqueue_new.php";
        this.retrieveUrl = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_retrieve.php";
        
        // –ù–ê–°–¢–†–û–ô–ö–ò
        this.defaultWaitTime = 10000; // 10 —Å–µ–∫—É–Ω–¥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        this.maxRetries = 60;
        this.requestTimeout = 30000; // 30 —Å–µ–∫—É–Ω–¥
        
        // –î–û–°–¢–£–ü–ù–´–ï –ú–û–î–ï–õ–ò
        this.availableModels = ['CYP1A2', 'CYP2C9', 'CYP2C19', 'CYP2D6', 'CYP3A4', 'ALL_MODELS'];
        this.inputTypes = ['name', 'smiles'];
    }

    /**
     * –®–ê–ì 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
     * @param {string} inputData - –ù–∞–∑–≤–∞–Ω–∏–µ –ë–ê–î–∞ –∏–ª–∏ SMILES —Å—Ç—Ä–æ–∫–∞
     * @param {string} inputType - 'name' –∏–ª–∏ 'smiles'
     * @param {string} models - CYP –º–æ–¥–µ–ª–∏ –∏–ª–∏ 'ALL_MODELS'
     * @returns {Promise<string|null>} ID –∑–∞–¥–∞—á–∏ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
     */
    async enqueueRequest(inputData, inputType = 'name', models = 'ALL_MODELS') {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞:');
        console.log(`   URL: ${this.enqueueUrl}`);
        console.log(`   –î–∞–Ω–Ω—ã–µ: ${JSON.stringify({inputData, inputType, models})}`);

        try {
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
            const formData = new FormData();
            formData.append('input', inputData);
            formData.append('input_type', inputType);
            formData.append('models', models);

            // HTTP POST –∑–∞–ø—Ä–æ—Å
            const response = await fetch(this.enqueueUrl, {
                method: 'POST',
                body: formData,
                // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º Content-Type - –±—Ä–∞—É–∑–µ—Ä —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –¥–ª—è FormData
            });

            console.log('üì® –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
            console.log(`   –°—Ç–∞—Ç—É—Å –∫–æ–¥: ${response.status}`);
            console.log(`   –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, Object.fromEntries(response.headers.entries()));

            // –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ê–¢–£–° –ö–û–î–û–í
            switch (response.status) {
                case 200:
                    // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                    const taskId = await response.text();
                    console.log(`   ID –∑–∞–¥–∞—á–∏: ${taskId.trim()}`);
                    return taskId.trim();

                case 429:
                    // –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
                    console.warn('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (429)');
                    const retryAfter = response.headers.get('Retry-After') || this.defaultWaitTime / 1000;
                    console.log(`   –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑: ${retryAfter} —Å–µ–∫—É–Ω–¥`);
                    throw new Error(`Too many requests. Retry after ${retryAfter} seconds`);

                case 403:
                    // –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–Ω–µ–≤–Ω–∞—è –∫–≤–æ—Ç–∞
                    console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–Ω–µ–≤–Ω–∞—è –∫–≤–æ—Ç–∞ (403)');
                    throw new Error('Daily quota exceeded');

                default:
                    const errorText = await response.text();
                    console.error(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: ${response.status}`);
                    console.error(`   –û—Ç–≤–µ—Ç: ${errorText}`);
                    throw new Error(`Unexpected status code: ${response.status}`);
            }

        } catch (error) {
            if (error.message.includes('fetch')) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
                throw new Error('Network error during request submission');
            }
            throw error;
        }
    }

    /**
     * –®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ ID –∑–∞–¥–∞—á–∏
     * @param {string} taskId - ID –∑–∞–¥–∞—á–∏
     * @returns {Promise<string|null>} CSV —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
     */
    async retrieveResults(taskId) {
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏: ${taskId}`);

        for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
            try {
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.maxRetries}`);

                // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
                const formData = new FormData();
                formData.append('task_id', taskId);

                const response = await fetch(this.retrieveUrl, {
                    method: 'POST',
                    body: formData,
                });

                console.log(`   –°—Ç–∞—Ç—É—Å –∫–æ–¥: ${response.status}`);

                switch (response.status) {
                    case 200:
                        // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã!
                        const csvUrl = await response.text();
                        console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã: ${csvUrl.trim()}`);
                        return await this.downloadCSVResults(csvUrl.trim());

                    case 404:
                        // –í—ã—á–∏—Å–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
                        console.log('‚è≥ –í—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã (404)');
                        const retryAfter = parseInt(response.headers.get('Retry-After')) || (this.defaultWaitTime / 1000);
                        console.log(`   –û–∂–∏–¥–∞–Ω–∏–µ: ${retryAfter} —Å–µ–∫—É–Ω–¥`);
                        
                        await this.sleep(retryAfter * 1000);
                        continue;

                    case 429:
                        // –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
                        console.warn('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (429)');
                        const waitTime = parseInt(response.headers.get('Retry-After')) || (this.defaultWaitTime / 1000);
                        await this.sleep(waitTime * 1000);
                        continue;

                    default:
                        const errorText = await response.text();
                        console.error(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: ${response.status}`);
                        console.error(`   –û—Ç–≤–µ—Ç: ${errorText}`);
                        throw new Error(`Unexpected status code: ${response.status}`);
                }

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, error.message);
                
                if (attempt === this.maxRetries) {
                    throw new Error('Max retries exceeded');
                }
                
                await this.sleep(this.defaultWaitTime);
            }
        }

        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫');
    }

    /**
     * –®–ê–ì 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
     * @param {string} csvUrl - URL –∫ CSV —Ñ–∞–π–ª—É
     * @returns {Promise<string>} CSV —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
     */
    async downloadCSVResults(csvUrl) {
        console.log(`üìä –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV: ${csvUrl}`);

        try {
            const response = await fetch(csvUrl);

            if (response.ok) {
                const csvContent = await response.text();
                console.log('‚úÖ CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω');
                console.log(`   –†–∞–∑–º–µ—Ä: ${csvContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);

                // –ü–∞—Ä—Å–∏–Ω–≥ CSV –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                const lines = csvContent.trim().split('\n');
                console.log(`   –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${lines.length}`);

                if (lines.length > 0) {
                    console.log(`   –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${lines[0]}`);
                    if (lines.length > 1) {
                        console.log(`   –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö: ${lines[1]}`);
                    }
                }

                return csvContent;
            } else {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV:', error.message);
            throw new Error(`Failed to download CSV: ${error.message}`);
        }
    }

    /**
     * –ü–ê–†–°–ò–ù–ì CSV —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JavaScript –æ–±—ä–µ–∫—Ç
     * @param {string} csvContent - CSV —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
     * @returns {Object} –û–±—ä–µ–∫—Ç —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ CYP
     */
    parseCSVResults(csvContent) {
        const lines = csvContent.trim().split('\n');
        if (lines.length < 2) {
            throw new Error('Invalid CSV format');
        }

        const headers = lines[0].split(',').map(h => h.trim());
        const dataLine = lines[1].split(',').map(d => d.trim());

        const result = {
            compound: dataLine[0] || 'Unknown',
            predictions: {},
            metadata: {
                timestamp: new Date().toISOString(),
                source: 'SuperCYPsPred'
            }
        };

        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ CYP —Ñ–µ—Ä–º–µ–Ω—Ç–∞
        for (let i = 1; i < headers.length; i++) {
            const cypName = headers[i];
            const prediction = parseFloat(dataLine[i]);
            
            if (!isNaN(prediction)) {
                result.predictions[cypName] = {
                    value: prediction,
                    riskLevel: this.calculateRiskLevel(prediction),
                    interpretation: this.interpretPrediction(cypName, prediction)
                };
            }
        }

        return result;
    }

    /**
     * –†–ê–°–ß–ï–¢ –£–†–û–í–ù–Ø –†–ò–°–ö–ê
     * @param {number} prediction - –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (0-1)
     * @returns {string} –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
     */
    calculateRiskLevel(prediction) {
        if (prediction >= 0.7) return 'high';
        if (prediction >= 0.4) return 'medium';
        return 'low';
    }

    /**
     * –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø
     * @param {string} cypName - –ù–∞–∑–≤–∞–Ω–∏–µ CYP —Ñ–µ—Ä–º–µ–Ω—Ç–∞
     * @param {number} prediction - –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
     * @returns {string} –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
     */
    interpretPrediction(cypName, prediction) {
        const riskLevel = this.calculateRiskLevel(prediction);
        
        const interpretations = {
            high: `–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è ${cypName}. –í–æ–∑–º–æ–∂–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏.`,
            medium: `–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è ${cypName}. –í–æ–∑–º–æ–∂–Ω—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏.`,
            low: `–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è ${cypName}. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.`
        };

        return interpretations[riskLevel];
    }

    /**
     * –ü–û–õ–ù–´–ô –¶–ò–ö–õ: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ CYP –ø—Ä–æ—Ñ–∏–ª—è
     * @param {string} compound - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ SMILES
     * @param {string} inputType - 'name' –∏–ª–∏ 'smiles'
     * @param {string} models - CYP –º–æ–¥–µ–ª–∏
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
     */
    async predictCYPProfile(compound, inputType = 'name', models = 'ALL_MODELS') {
        console.log('üß¨ –ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è CYP –ø—Ä–æ—Ñ–∏–ª—è');
        console.log(`   –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${compound}`);
        console.log(`   –¢–∏–ø –≤—Ö–æ–¥–∞: ${inputType}`);
        console.log(`   –ú–æ–¥–µ–ª–∏: ${models}`);
        console.log('='.repeat(60));

        try {
            // –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            const taskId = await this.enqueueRequest(compound, inputType, models);
            console.log('='.repeat(60));

            // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            const csvResults = await this.retrieveResults(taskId);
            console.log('='.repeat(60));

            // –®–∞–≥ 3: –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            const parsedResults = this.parseCSVResults(csvResults);
            
            console.log('üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
            console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:', JSON.stringify(parsedResults, null, 2));

            return parsedResults;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è CYP –ø—Ä–æ—Ñ–∏–ª—è:', error.message);
            throw error;
        }
    }

    /**
     * –£–¢–ò–õ–ò–¢–ê: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * @param {number} ms - –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API (–¥–ª—è Node.js)
async function testAPI() {
    const api = new SuperCYPsPredAPI();

    try {
        console.log('üß™ –¢–ï–°–¢ 1: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ë–ê–î–∞');
        const result1 = await api.predictCYPProfile('Zinc', 'name');
        console.log('‚úÖ –¢–µ—Å—Ç 1 —É—Å–ø–µ—à–µ–Ω');
        
        console.log('\n' + '='.repeat(80) + '\n');
        
        console.log('üß™ –¢–ï–°–¢ 2: SMILES –∞—Å–ø–∏—Ä–∏–Ω–∞');
        const aspirinSMILES = 'CC(=O)OC1=CC=CC=C1C(=O)O';
        const result2 = await api.predictCYPProfile(aspirinSMILES, 'smiles');
        console.log('‚úÖ –¢–µ—Å—Ç 2 —É—Å–ø–µ—à–µ–Ω');

    } catch (error) {
        console.error('‚ùå –¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω:', error.message);
    }
}

// –≠–ö–°–ü–û–†–¢ –î–õ–Ø React Native / Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SuperCYPsPredAPI;
}

// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å):
// testAPI();

/**
 * –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í REACT NATIVE:
 * 
 * import SuperCYPsPredAPI from './supercyps_js_adapter';
 * 
 * const checkSupplementCYP = async (supplementName) => {
 *   const api = new SuperCYPsPredAPI();
 *   
 *   try {
 *     const result = await api.predictCYPProfile(supplementName);
 *     
 *     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
 *     const highRiskCYPs = Object.entries(result.predictions)
 *       .filter(([cyp, data]) => data.riskLevel === 'high')
 *       .map(([cyp, data]) => ({ cyp, ...data }));
 *     
 *     if (highRiskCYPs.length > 0) {
 *       Alert.alert(
 *         '‚ö†Ô∏è CYP –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ',
 *         `${supplementName} –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º –ª–µ–∫–∞—Ä—Å—Ç–≤`
 *       );
 *     }
 *     
 *     return result;
 *   } catch (error) {
 *     console.error('CYP –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞:', error);
 *     return null;
 *   }
 * };
 */