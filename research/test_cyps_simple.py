#!/usr/bin/env python3
"""
–ü–†–û–°–¢–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SuperCYPsPred API
–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ Python
"""

import urllib.request
import urllib.parse
import time
import json

def test_api_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API —Å curl-–ø–æ–¥–æ–±–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    
    print("üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SuperCYPsPred API")
    print("="*50)
    
    # URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    enqueue_url = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_enqueue_new.php"
    retrieve_url = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_retrieve.php"
    
    # –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Zinc
    print("\nüì§ –¢–ï–°–¢ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Zinc")
    
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = {
            'input': 'Zinc',
            'input_type': 'name', 
            'models': 'ALL_MODELS'
        }
        
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è POST
        encoded_data = urllib.parse.urlencode(data).encode('utf-8')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        req = urllib.request.Request(
            enqueue_url,
            data=encoded_data,
            method='POST'
        )
        req.add_header('Content-Type', 'application/x-www-form-urlencoded')
        
        print(f"   URL: {enqueue_url}")
        print(f"   –î–∞–Ω–Ω—ã–µ: {data}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        with urllib.request.urlopen(req, timeout=30) as response:
            status_code = response.getcode()
            response_text = response.read().decode('utf-8')
            
            print(f"   –°—Ç–∞—Ç—É—Å: {status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response_text}")
            
            if status_code == 200:
                task_id = response_text.strip()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω ID –∑–∞–¥–∞—á–∏: {task_id}")
                
                # –°–æ—Ö—Ä–∞–Ω–∏–º ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                return task_id
            else:
                print("‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
                return None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def check_task_status(task_id, retrieve_url):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    print(f"\nüì• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {task_id}")
    
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data = {'task_id': task_id}
        encoded_data = urllib.parse.urlencode(data).encode('utf-8')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        req = urllib.request.Request(
            retrieve_url,
            data=encoded_data,
            method='POST'
        )
        req.add_header('Content-Type', 'application/x-www-form-urlencoded')
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        with urllib.request.urlopen(req, timeout=30) as response:
            status_code = response.getcode()
            response_text = response.read().decode('utf-8')
            
            print(f"   –°—Ç–∞—Ç—É—Å: {status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response_text[:100]}...")
            
            return status_code, response_text
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return None, None

def download_csv(csv_url):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞"""
    print(f"\nüìä –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV: {csv_url}")
    
    try:
        with urllib.request.urlopen(csv_url, timeout=30) as response:
            csv_content = response.read().decode('utf-8')
            print(f"‚úÖ CSV —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(csv_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            return csv_content
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    retrieve_url = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_retrieve.php"
    
    # –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    task_id = test_api_simple()
    
    if not task_id:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
        return
    
    # –¢–µ—Å—Ç 2: –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)...")
    
    max_attempts = 10  # –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
    
    for attempt in range(1, max_attempts + 1):
        print(f"\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}")
        
        status_code, response_text = check_task_status(task_id, retrieve_url)
        
        if status_code == 200:
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã!
            csv_url = response_text.strip()
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã: {csv_url}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º CSV
            csv_content = download_csv(csv_url)
            
            if csv_content:
                # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                print("\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
                print("-" * 40)
                
                lines = csv_content.strip().split('\n')
                if len(lines) >= 2:
                    headers = lines[0].split(',')
                    data = lines[1].split(',')
                    
                    print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(headers)}")
                    print(f"–î–∞–Ω–Ω—ã–µ: {', '.join(data)}")
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    with open('zinc_cyp_results.csv', 'w') as f:
                        f.write(csv_content)
                    print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: zinc_cyp_results.csv")
                    
                    print("\nüéØ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
                    return csv_content
                
        elif status_code == 404:
            # –ï—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
            print("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...")
            
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status_code}")
        
        # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
        if attempt < max_attempts:
            print("‚è∏Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30)
    
    print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
    return None

if __name__ == "__main__":
    main()