#!/usr/bin/env python3
"""
–ü–û–î–†–û–ë–ù–´–ô –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó SuperCYPsPred API
–î–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ Python —Å–∫—Ä–∏–ø—Ç–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
"""

import requests
import time
import json
import argparse
import sys

class SuperCYPsPredAPI:
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è SuperCYPsPred API —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    """
    
    def __init__(self):
        # –≠–ù–î–ü–û–ò–ù–¢–´ API
        self.enqueue_url = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_enqueue_new.php"
        self.retrieve_url = "http://insilico-cyp.charite.de/SuperCYPsPred/src/api_retrieve.php"
        
        # –ü–ê–†–ê–ú–ï–¢–†–´ –ó–ê–ü–†–û–°–ê
        self.available_models = ['CYP1A2', 'CYP2C9', 'CYP2C19', 'CYP2D6', 'CYP3A4', 'ALL_MODELS']
        self.input_types = ['name', 'smiles']
        
        # –ù–ê–°–¢–†–û–ô–ö–ò –û–ñ–ò–î–ê–ù–ò–Ø
        self.default_wait_time = 10  # —Å–µ–∫—É–Ω–¥
        self.max_retries = 60  # –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
        
    def enqueue_request(self, input_data, input_type='name', models='ALL_MODELS'):
        """
        –®–ê–ì 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã HTTP POST –∑–∞–ø—Ä–æ—Å–∞:
        - input: –ù–∞–∑–≤–∞–Ω–∏–µ –ë–ê–î–∞ –∏–ª–∏ SMILES —Å—Ç—Ä–æ–∫–∞
        - input_type: 'name' –∏–ª–∏ 'smiles'
        - models: –°–ø–∏—Å–æ–∫ CYP –º–æ–¥–µ–ª–µ–π –∏–ª–∏ 'ALL_MODELS'
        """
        
        # –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• POST –ó–ê–ü–†–û–°–ê
        post_data = {
            'input': input_data,
            'input_type': input_type,
            'models': models
        }
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞:")
        print(f"   URL: {self.enqueue_url}")
        print(f"   –î–∞–Ω–Ω—ã–µ: {post_data}")
        
        try:
            # HTTP POST –ó–ê–ü–†–û–°
            response = requests.post(
                self.enqueue_url, 
                data=post_data,
                timeout=30  # –¢–∞–π–º-–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
            )
            
            print(f"üì® –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
            print(f"   –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
            
            # –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ê–¢–£–° –ö–û–î–û–í
            if response.status_code == 200:
                # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                result = response.text.strip()
                print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {result}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                return result
                
            elif response.status_code == 429:
                # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
                print("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (429)")
                retry_after = response.headers.get('Retry-After', self.default_wait_time)
                print(f"   –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑: {retry_after} —Å–µ–∫—É–Ω–¥")
                return None
                
            elif response.status_code == 403:
                # –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–Ω–µ–≤–Ω–∞—è –∫–≤–æ—Ç–∞
                print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–Ω–µ–≤–Ω–∞—è –∫–≤–æ—Ç–∞ (403)")
                return None
                
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def retrieve_results(self, task_id):
        """
        –®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ ID –∑–∞–¥–∞—á–∏
        
        –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π:
        - –ó–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        - –ù—É–∂–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–∞–∫ URL –∫ CSV —Ñ–∞–π–ª—É
        """
        
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏: {task_id}")
        
        for attempt in range(self.max_retries):
            try:
                # POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
                post_data = {'task_id': task_id}
                
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}")
                
                response = requests.post(
                    self.retrieve_url,
                    data=post_data,
                    timeout=30
                )
                
                print(f"   –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
                
                # –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–û–í
                if response.status_code == 200:
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã!
                    csv_url = response.text.strip()
                    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã: {csv_url}")
                    
                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
                    return self.download_csv_results(csv_url)
                    
                elif response.status_code == 404:
                    # –í—ã—á–∏—Å–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
                    print("‚è≥ –í—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã (404)")
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
                    retry_after = int(response.headers.get('Retry-After', self.default_wait_time))
                    print(f"   –û–∂–∏–¥–∞–Ω–∏–µ: {retry_after} —Å–µ–∫—É–Ω–¥")
                    
                    time.sleep(retry_after)
                    continue
                    
                elif response.status_code == 429:
                    # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
                    print("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (429)")
                    retry_after = int(response.headers.get('Retry-After', self.default_wait_time))
                    time.sleep(retry_after)
                    continue
                    
                else:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                    return None
                    
            except requests.exceptions.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                time.sleep(self.default_wait_time)
                continue
        
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
        return None
    
    def download_csv_results(self, csv_url):
        """
        –®–ê–ì 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        
        –§–æ—Ä–º–∞—Ç CSV:
        - –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –∑–∞–≥–æ–ª–æ–≤–∫–∏
        - –î–∞–Ω–Ω—ã–µ: –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ CYP —Ñ–µ—Ä–º–µ–Ω—Ç–∞
        - –ó–Ω–∞—á–µ–Ω–∏—è: 0-1 (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è)
        """
        
        print(f"üìä –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV: {csv_url}")
        
        try:
            response = requests.get(csv_url, timeout=30)
            
            if response.status_code == 200:
                csv_content = response.text
                print("‚úÖ CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω")
                print(f"   –†–∞–∑–º–µ—Ä: {len(csv_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü–∞—Ä—Å–∏–Ω–≥ CSV –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                lines = csv_content.strip().split('\n')
                print(f"   –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(lines)}")
                
                if len(lines) > 0:
                    print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏: {lines[0]}")
                    if len(lines) > 1:
                        print(f"   –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {lines[1]}")
                
                return csv_content
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV: {response.status_code}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return None
    
    def predict_cyp_profile(self, compound, input_type='name', models='ALL_MODELS'):
        """
        –ü–û–õ–ù–´–ô –¶–ò–ö–õ: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ CYP –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        """
        
        print(f"üß¨ –ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è CYP –ø—Ä–æ—Ñ–∏–ª—è")
        print(f"   –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {compound}")
        print(f"   –¢–∏–ø –≤—Ö–æ–¥–∞: {input_type}")
        print(f"   –ú–æ–¥–µ–ª–∏: {models}")
        print("=" * 60)
        
        # –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        task_id = self.enqueue_request(compound, input_type, models)
        if not task_id:
            return None
        
        print("=" * 60)
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        csv_results = self.retrieve_results(task_id)
        if not csv_results:
            return None
        
        print("=" * 60)
        print("üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        return csv_results

def test_api():
    """
    –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    
    api = SuperCYPsPredAPI()
    
    # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ë–ê–î–∞
    print("üß™ –¢–ï–°–¢ 1: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
    result1 = api.predict_cyp_profile("Zinc", input_type='name')
    
    if result1:
        print("‚úÖ –¢–µ—Å—Ç 1 —É—Å–ø–µ—à–µ–Ω")
        print("CSV —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
        print(result1[:500])
    else:
        print("‚ùå –¢–µ—Å—Ç 1 –Ω–µ—É–¥–∞—á–µ–Ω")
    
    print("\n" + "="*80 + "\n")
    
    # –¢–µ—Å—Ç 2: SMILES —Å—Ç—Ä–æ–∫–∞ (–∞—Å–ø–∏—Ä–∏–Ω)
    print("üß™ –¢–ï–°–¢ 2: SMILES —Å—Ç—Ä–æ–∫–∞ –∞—Å–ø–∏—Ä–∏–Ω–∞")
    aspirin_smiles = "CC(=O)OC1=CC=CC=C1C(=O)O"
    result2 = api.predict_cyp_profile(aspirin_smiles, input_type='smiles')
    
    if result2:
        print("‚úÖ –¢–µ—Å—Ç 2 —É—Å–ø–µ—à–µ–Ω")
        print("CSV —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
        print(result2[:500])
    else:
        print("‚ùå –¢–µ—Å—Ç 2 –Ω–µ—É–¥–∞—á–µ–Ω")

def analyze_api_structure():
    """
    –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ API –î–õ–Ø –ê–î–ê–ü–¢–ê–¶–ò–ò
    """
    
    print("üîç –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó SuperCYPsPred API")
    print("=" * 60)
    
    print("üìã –ö–õ–Æ–ß–ï–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    print("1. HTTP POST –∑–∞–ø—Ä–æ—Å—ã –∫ 2 —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º")
    print("2. –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π")
    print("3. –ú–µ—Ö–∞–Ω–∏–∑–º –æ–∂–∏–¥–∞–Ω–∏—è —Å Retry-After –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏")
    print("4. CSV —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("5. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å –∫–æ–¥–æ–≤")
    
    print("\nüì° –°–ï–¢–ï–í–´–ï –î–ï–¢–ê–õ–ò:")
    print("- –ü—Ä–æ—Ç–æ–∫–æ–ª: HTTP (–Ω–µ HTTPS!)")
    print("- –ú–µ—Ç–æ–¥: POST –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("- –¢–∞–π–º-–∞—É—Ç—ã: 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø—Ä–æ—Å")
    print("- –†–µ—Ç—Ä–∞–∏: –î–æ 60 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    
    print("\nüîÑ –õ–û–ì–ò–ö–ê –û–ñ–ò–î–ê–ù–ò–Ø:")
    print("- –û—Ç–ø—Ä–∞–≤–∫–∞ ‚Üí –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∑–∞–¥–∞—á–∏")
    print("- –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 10+ —Å–µ–∫—É–Ω–¥")
    print("- HTTP 404 = –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
    print("- HTTP 200 = —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã")
    print("- HTTP 429 = —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    print("\nüíæ –§–û–†–ú–ê–¢ –î–ê–ù–ù–´–•:")
    print("- –í—Ö–æ–¥: –ù–∞–∑–≤–∞–Ω–∏–µ –ë–ê–î–∞ –∏–ª–∏ SMILES")
    print("- –í—ã—Ö–æ–¥: CSV —Ñ–∞–π–ª —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏")
    print("- –ó–Ω–∞—á–µ–Ω–∏—è: 0.0-1.0 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ CYP —Ñ–µ—Ä–º–µ–Ω—Ç–∞")
    
    print("\nüåê –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ê–î–ê–ü–¢–ê–¶–ò–ò:")
    print("‚úÖ –õ–µ–≥–∫–æ –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ JavaScript/TypeScript")
    print("‚úÖ –ú–æ–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å –≤ REST API —Å–µ—Ä–≤–µ—Ä")
    print("‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å React Native fetch()")
    print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("‚ö†Ô∏è –ù—É–∂–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∏ —Ä–µ—Ç—Ä–∞–µ–≤")

if __name__ == "__main__":
    print("üî¨ SuperCYPsPred API - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    print("=" * 60)
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    analyze_api_structure()
    
    print("\n" + "="*80 + "\n")
    
    # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)
    # test_api()
    
    print("üìù –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–º. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–æ–¥–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")