import { Tool } from '@modelcontextprotocol/sdk/types.js';
import { z } from 'zod';
import { SupplementSafetyChecker } from '../utils/supplement-safety-checker.js';

const AnalyzeSupplementSafetyParamsSchema = z.object({
  supplements: z.array(z.string()).min(1, "At least one supplement is required").max(10, "Maximum 10 supplements allowed"),
  drugs: z.array(z.string()).optional().default([]),
  include_mechanisms: z.boolean().optional().default(true),
  detailed_analysis: z.boolean().optional().default(false)
});

export type AnalyzeSupplementSafetyParams = z.infer<typeof AnalyzeSupplementSafetyParamsSchema>;

export class AnalyzeSupplementSafetyTool {
  private safetyChecker: SupplementSafetyChecker;

  constructor() {
    this.safetyChecker = new SupplementSafetyChecker();
  }

  getToolDefinition(): Tool {
    return {
      name: 'analyze_supplement_safety',
      description: '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–æ–±–∞–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ CYP450 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É –¥–æ–±–∞–≤–∫–∞–º–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ 200+ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –¥–æ–±–∞–≤–∫–∞–º.',
      inputSchema: {
        type: 'object',
        properties: {
          supplements: {
            type: 'array',
            description: '–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º). –ü—Ä–∏–º–µ—Ä—ã: ashwagandha, rhodiola, turmeric, ginkgo, vitamin_d',
            items: {
              type: 'string'
            },
            minItems: 1,
            maxItems: 10
          },
          drugs: {
            type: 'array',
            description: '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π',
            items: {
              type: 'string'
            },
            default: []
          },
          include_mechanisms: {
            type: 'boolean',
            description: '–í–∫–ª—é—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π (CYP450)',
            default: true
          },
          detailed_analysis: {
            type: 'boolean',
            description: '–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏',
            default: false
          }
        },
        required: ['supplements'],
        additionalProperties: false
      }
    };
  }

  async execute(params: unknown): Promise<{
    safety_analysis: {
      safety_score: string;
      total_interactions: number;
      summary: string;
    };
    cyp_conflicts: Array<{
      supplements: string[];
      cyp_enzyme: string;
      conflict_type: string;
      severity: string;
      description: string;
      mechanism?: string;
    }>;
    drug_interactions: Array<{
      drug: string;
      supplement: string;
      cyp_enzyme: string;
      mechanism: string;
      severity: string;
      recommendation: string;
    }>;
    recommendations: string[];
    safety_tips: string[];
    references: {
      pubmed_links: string[];
      total_studies: number;
    };
    available_supplements?: string[];
  }> {
    try {
      // Validate parameters
      const validatedParams = AnalyzeSupplementSafetyParamsSchema.parse(params);

      // Perform safety analysis
      const result = await this.safetyChecker.analyzeCombination(
        validatedParams.supplements,
        validatedParams.drugs
      );

      // Enhance conflicts with mechanisms if requested
      const enhancedConflicts = validatedParams.include_mechanisms 
        ? result.cyp_conflicts.map(conflict => ({
            supplements: [conflict.supplement1, conflict.supplement2],
            cyp_enzyme: conflict.cyp_enzyme,
            conflict_type: conflict.conflict_type,
            severity: conflict.severity,
            description: conflict.description,
            mechanism: this.generateMechanismExplanation(conflict.cyp_enzyme, conflict.conflict_type)
          }))
        : result.cyp_conflicts.map(conflict => ({
            supplements: [conflict.supplement1, conflict.supplement2],
            cyp_enzyme: conflict.cyp_enzyme,
            conflict_type: conflict.conflict_type,
            severity: conflict.severity,
            description: conflict.description
          }));

      // Generate safety tips
      const safetyTips = this.generateSafetyTips(validatedParams.supplements, result);

      // Convert PMID references to PubMed links
      const pubmedLinks = result.references
        .filter(ref => ref.startsWith('PMID:'))
        .map(ref => `https://pubmed.ncbi.nlm.nih.gov/${ref.replace('PMID:', '')}/`);

      // Get available supplements list if requested
      let availableSupplements: string[] | undefined;
      if (validatedParams.detailed_analysis) {
        availableSupplements = await this.safetyChecker.listAvailableSupplements();
      }

      return {
        safety_analysis: {
          safety_score: result.safety_score,
          total_interactions: result.cyp_conflicts.length + result.drug_interactions.length,
          summary: result.summary
        },
        cyp_conflicts: enhancedConflicts,
        drug_interactions: result.drug_interactions,
        recommendations: result.recommendations,
        safety_tips: safetyTips,
        references: {
          pubmed_links: pubmedLinks,
          total_studies: result.references.length
        },
        ...(availableSupplements && { available_supplements: availableSupplements })
      };

    } catch (error) {
      if (error instanceof z.ZodError) {
        throw new Error(`Invalid parameters: ${error.errors.map(e => e.message).join(', ')}`);
      }

      if (error.message.includes('Unknown supplements')) {
        // Get list of available supplements for helpful error message
        const availableSupplements = await this.safetyChecker.listAvailableSupplements();
        throw new Error(`${error.message}. Available supplements: ${availableSupplements.slice(0, 20).join(', ')}... (showing first 20)`);
      }

      throw new Error(`Safety analysis failed: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  private generateMechanismExplanation(cypEnzyme: string, conflictType: string): string {
    const enzymeDescriptions = {
      'CYP3A4': '–º–µ—Ç–∞–±–æ–ª–∏–∑–∏—Ä—É–µ—Ç ~50% –≤—Å–µ—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤, –≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç–∏–Ω—ã, –∏–º–º—É–Ω–æ–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç—ã',
      'CYP2D6': '–º–µ—Ç–∞–±–æ–ª–∏–∑–∏—Ä—É–µ—Ç –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç—ã, –±–µ—Ç–∞-–±–ª–æ–∫–∞—Ç–æ—Ä—ã, –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ',
      'CYP2C9': '–º–µ—Ç–∞–±–æ–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—Ä—Ñ–∞—Ä–∏–Ω, –ù–ü–í–°, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã',
      'CYP2C19': '–º–µ—Ç–∞–±–æ–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω–≥–∏–±–∏—Ç–æ—Ä—ã –ø—Ä–æ—Ç–æ–Ω–Ω–æ–π –ø–æ–º–ø—ã, –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª',
      'CYP1A2': '–º–µ—Ç–∞–±–æ–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ—Ñ–µ–∏–Ω, —Ç–µ–æ—Ñ–∏–ª–ª–∏–Ω, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–Ω—Ç–∏–ø—Å–∏—Ö–æ—Ç–∏–∫–∏',
      'CYP2B6': '–º–µ—Ç–∞–±–æ–ª–∏–∑–∏—Ä—É–µ—Ç –±—É–ø—Ä–æ–ø–∏–æ–Ω, —ç—Ñ–∞–≤–∏—Ä–µ–Ω–∑, —Ü–∏–∫–ª–æ—Ñ–æ—Å—Ñ–∞–º–∏–¥'
    };

    const baseDescription = enzymeDescriptions[cypEnzyme] || '—É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤';

    if (conflictType === 'opposing_effects') {
      return `${cypEnzyme} ${baseDescription}. –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —É—Ä–æ–≤–Ω—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤.`;
    } else if (conflictType === 'additive_inhibition') {
      return `${cypEnzyme} ${baseDescription}. –°—É–º–º–∞—Ä–Ω–æ–µ –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤.`;
    }

    return `${cypEnzyme} ${baseDescription}.`;
  }

  private generateSafetyTips(supplements: string[], analysisResult: any): string[] {
    const tips: string[] = [];

    // General timing tips
    if (analysisResult.cyp_conflicts.length > 0) {
      tips.push('‚è∞ –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –¥–æ–±–∞–≤–∫–∏ –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è –¥–Ω—è (–∏–Ω—Ç–µ—Ä–≤–∞–ª 2-4 —á–∞—Å–∞)');
      tips.push('üçΩÔ∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–∫–∏ –ª—É—á—à–µ —É—Å–≤–∞–∏–≤–∞—é—Ç—Å—è —Å –µ–¥–æ–π, –¥—Ä—É–≥–∏–µ - –Ω–∞—Ç–æ—â–∞–∫');
    }

    // Monitoring tips
    if (analysisResult.drug_interactions.length > 0) {
      tips.push('üìä –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
      tips.push('ü©∫ –†–µ–≥—É–ª—è—Ä–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤');
    }

    // Specific supplement tips
    if (supplements.includes('turmeric') || supplements.includes('curcumin')) {
      tips.push('üå∂Ô∏è –ö—É—Ä–∫—É–º–∏–Ω: –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Å —á–µ—Ä–Ω—ã–º –ø–µ—Ä—Ü–µ–º (–ø–∏–ø–µ—Ä–∏–Ω) –¥–ª—è –ª—É—á—à–µ–≥–æ —É—Å–≤–æ–µ–Ω–∏—è');
    }

    if (supplements.includes('ashwagandha')) {
      tips.push('üåô –ê—à–≤–∞–≥–∞–Ω–¥–∞: –ª—É—á—à–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–µ—á–µ—Ä–æ–º –∏–∑-–∑–∞ —Å–µ–¥–∞—Ç–∏–≤–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞');
    }

    if (supplements.includes('rhodiola')) {
      tips.push('‚òÄÔ∏è –†–æ–¥–∏–æ–ª–∞: –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ —É—Ç—Ä–æ–º, –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —Å–æ–Ω');
    }

    if (supplements.includes('green_tea') || supplements.includes('egcg')) {
      tips.push('‚òï –ó–µ–ª–µ–Ω—ã–π —á–∞–π: –æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∫–æ—Ñ–µ–∏–Ω, –º–æ–∂–µ—Ç —É—Å–∏–ª–∏—Ç—å —Å—Ç–∏–º—É–ª–∏—Ä—É—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç');
    }

    // Start slow tip
    if (supplements.length > 2) {
      tips.push('üêå –ù–∞—á–Ω–∏—Ç–µ —Å –æ–¥–Ω–æ–π –¥–æ–±–∞–≤–∫–∏, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ (1 –Ω–æ–≤–∞—è –≤ –Ω–µ–¥–µ–ª—é)');
    }

    // Quality tip
    tips.push('‚úÖ –í—ã–±–∏—Ä–∞–π—Ç–µ –¥–æ–±–∞–≤–∫–∏ –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞');

    return tips;
  }
}