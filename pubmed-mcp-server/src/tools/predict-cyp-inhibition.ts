import { Tool } from '@modelcontextprotocol/sdk/types.js';
import { z } from 'zod';
import { CypPredictor } from '../utils/cyp-predictor.js';

const PredictCypInhibitionParamsSchema = z.object({
  supplement_name: z.string().min(1, "Supplement name is required"),
  smiles: z.string().optional(),
  check_cyps: z.array(z.string()).optional().default(['3A4', '2C9', '2C19', '2D6', '1A2', '2B6']),
  include_drug_interactions: z.boolean().optional().default(true),
  detailed_analysis: z.boolean().optional().default(false)
});

export type PredictCypInhibitionParams = z.infer<typeof PredictCypInhibitionParamsSchema>;

export class PredictCypInhibitionTool {
  private cypPredictor: CypPredictor;

  constructor() {
    this.cypPredictor = new CypPredictor();
  }

  getToolDefinition(): Tool {
    return {
      name: 'predict_cyp_inhibition',
      description: '–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤ CYP450 –¥–ª—è –ª—é–±–æ–π –¥–æ–±–∞–≤–∫–∏ –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç —Ö–∏–º–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ PubChem –∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç SMILES —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤—ã—Ö –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–æ–±–∞–≤–æ–∫.',
      inputSchema: {
        type: 'object',
        properties: {
          supplement_name: {
            type: 'string',
            description: '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–∫–∏ –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–∏–º–µ—Ä—ã: curcumin, resveratrol, quercetin, berberine',
            minLength: 1
          },
          smiles: {
            type: 'string',
            description: 'SMILES —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–ª–µ–∫—É–ª—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ PubChem'
          },
          check_cyps: {
            type: 'array',
            description: '–°–ø–∏—Å–æ–∫ CYP —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
            items: {
              type: 'string',
              enum: ['1A2', '2C9', '2C19', '2D6', '2B6', '3A4']
            },
            default: ['3A4', '2C9', '2C19', '2D6', '1A2', '2B6']
          },
          include_drug_interactions: {
            type: 'boolean',
            description: '–í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏',
            default: true
          },
          detailed_analysis: {
            type: 'boolean',
            description: '–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏',
            default: false
          }
        },
        required: ['supplement_name'],
        additionalProperties: false
      }
    };
  }

  async execute(params: unknown): Promise<{
    prediction_summary: {
      supplement: string;
      overall_risk: string;
      high_risk_cyps: string[];
      moderate_risk_cyps: string[];
      methodology: string;
    };
    cyp_predictions: Array<{
      cyp_enzyme: string;
      inhibitor: boolean;
      confidence: number;
      probability: number;
      method: string;
      interpretation: string;
    }>;
    drug_interactions?: Array<{
      drug: string;
      cyp_enzyme: string;
      risk_description: string;
      severity: string;
      recommendation: string;
    }>;
    chemical_info?: {
      smiles?: string;
      source: string;
      molecular_features?: any;
    };
    recommendations: string[];
    disclaimer: string;
  }> {
    try {
      const validatedParams = PredictCypInhibitionParamsSchema.parse(params);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
      const result = await this.cypPredictor.predictCypInhibition(
        validatedParams.supplement_name,
        validatedParams.smiles,
        validatedParams.check_cyps
      );

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º CYP –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
      const cypPredictions = Object.entries(result.predictions)
        .filter(([_, prediction]) => !('error' in prediction))
        .map(([cyp, prediction]) => {
          const pred = prediction as any; // –∏–∑–±–µ–≥–∞–µ–º –æ—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤
          return {
            cyp_enzyme: cyp,
            inhibitor: pred.inhibitor,
            confidence: Math.round(pred.confidence * 100) / 100,
            probability: Math.round(pred.probability * 100) / 100,
            method: pred.method,
            interpretation: this.interpretSinglePrediction(cyp, pred)
          };
        });

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏
      let drugInteractions;
      if (validatedParams.include_drug_interactions) {
        drugInteractions = result.potential_drug_interactions.map(interaction => ({
          drug: interaction.drug,
          cyp_enzyme: interaction.cyp,
          risk_description: interaction.risk,
          severity: interaction.severity,
          recommendation: this.getDrugRecommendation(interaction.severity, interaction.drug)
        }));
      }

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–∏–º–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
      const chemicalInfo = {
        smiles: result.smiles,
        source: result.smiles ? 'PubChem API' : 'Not available',
        ...(validatedParams.detailed_analysis && result.smiles && {
          molecular_features: this.describeMolecularFeatures(result.smiles)
        })
      };

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const recommendations = this.generateRecommendations(result, validatedParams.supplement_name);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é
      const methodology = this.describeMethodology(cypPredictions, validatedParams.detailed_analysis);

      return {
        prediction_summary: {
          supplement: validatedParams.supplement_name,
          overall_risk: result.summary.risk_level,
          high_risk_cyps: result.summary.high_risk_cyps,
          moderate_risk_cyps: result.summary.moderate_risk_cyps,
          methodology
        },
        cyp_predictions: cypPredictions,
        ...(drugInteractions && { drug_interactions: drugInteractions }),
        chemical_info: chemicalInfo,
        recommendations,
        disclaimer: this.getDisclaimer()
      };

    } catch (error) {
      if (error instanceof z.ZodError) {
        throw new Error(`Invalid parameters: ${error.errors.map(e => e.message).join(', ')}`);
      }

      throw new Error(`CYP prediction failed: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  private interpretSinglePrediction(cyp: string, prediction: any): string {
    const confidence = Math.round(prediction.confidence * 100);
    
    if (prediction.inhibitor) {
      if (prediction.confidence > 0.8) {
        return `üî¥ –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è ${cyp} (${confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)`;
      } else if (prediction.confidence > 0.6) {
        return `üü° –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è ${cyp} (${confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)`;
      } else {
        return `üü† –ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è ${cyp} (${confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)`;
      }
    } else {
      return `üü¢ –ò–Ω–≥–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ ${cyp} –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ (${confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)`;
    }
  }

  private getDrugRecommendation(severity: string, drug: string): string {
    switch (severity) {
      case 'major':
        return `‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ —Å ${drug}. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞.`;
      case 'moderate':
        return `‚ö° –û–°–¢–û–†–û–ñ–ù–û: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ ${drug}. –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ–∑—ã.`;
      case 'minor':
        return `üí° –ò–ù–§–û–†–ú–ê–¶–ò–Ø: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å ${drug}. –ù–∞–±–ª—é–¥–µ–Ω–∏–µ.`;
      default:
        return `–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å ${drug}`;
    }
  }

  private describeMolecularFeatures(smiles: string): any {
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ SMILES —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    return {
      estimated_atoms: smiles.length,
      contains_nitrogen: smiles.includes('N') || smiles.includes('n'),
      contains_oxygen: smiles.includes('O') || smiles.includes('o'),
      contains_sulfur: smiles.includes('S') || smiles.includes('s'),
      aromatic_systems: (smiles.match(/c|C/g) || []).length > 6,
      complexity_score: Math.min(10, Math.round(smiles.length / 10))
    };
  }

  private generateRecommendations(result: any, supplementName: string): string[] {
    const recommendations: string[] = [];

    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞
    if (result.summary.risk_level === 'high') {
      recommendations.push('üö® –í–´–°–û–ö–ò–ô –†–ò–°–ö: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º –ø–µ—Ä–µ–¥ –ø—Ä–∏–µ–º–æ–º');
      recommendations.push('üìã –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤—Ä–∞—á—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤');
      recommendations.push('üïí –ï—Å–ª–∏ –≤—Ä–∞—á —Ä–∞–∑—Ä–µ—à–∏—Ç –ø—Ä–∏–µ–º, —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ —Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏ –Ω–∞ 4-6 —á–∞—Å–æ–≤');
    } else if (result.summary.risk_level === 'moderate') {
      recommendations.push('‚ö° –£–ú–ï–†–ï–ù–ù–´–ô –†–ò–°–ö: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞');
      recommendations.push('üìä –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
      recommendations.push('üïí –†–∞–∑–¥–µ–ª—è–π—Ç–µ –ø—Ä–∏–µ–º —Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏ –Ω–∞ 2-4 —á–∞—Å–∞');
    } else {
      recommendations.push('‚úÖ –ù–ò–ó–ö–ò–ô –†–ò–°–ö: –ó–Ω–∞—á–∏–º—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω—ã');
      recommendations.push('üë®‚Äç‚öïÔ∏è –ü—Ä–∏ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤—Å—ë —Ä–∞–≤–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç–µ –≤—Ä–∞—á–∞');
    }

    // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (result.potential_drug_interactions.length > 0) {
      recommendations.push('üíä –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º');
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations.push(`üß™ –ù–∞—á–Ω–∏—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–æ–∑—ã ${supplementName} –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏`);
    recommendations.push('üìö –ò–∑—É—á–∏—Ç–µ –Ω–∞—É—á–Ω—É—é –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–π –¥–æ–±–∞–≤–∫–∏');
    
    return recommendations;
  }

  private describeMethodology(predictions: any[], detailed: boolean): string {
    const methods = [...new Set(predictions.map(p => p.method))];
    
    let description = '–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º: ';
    
    if (methods.includes('api')) {
      description += '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–≤–Ω–µ—à–Ω–∏–π API), ';
    }
    if (methods.includes('database')) {
      description += '–±–∞–∑–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π, ';
    }
    if (methods.includes('local')) {
      description += '–º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞';
    }

    if (detailed) {
      description += '. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Ö–∏–º–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å CYP450 —Ñ–µ—Ä–º–µ–Ω—Ç–∞–º–∏.';
    }

    return description.replace(/, $/, '');
  }

  private getDisclaimer(): string {
    return '‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å, –Ω–µ –∑–∞–º–µ–Ω—è—é—â–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å—Ö–µ–º—ã –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–æ–±–∞–≤–æ–∫.';
  }
}