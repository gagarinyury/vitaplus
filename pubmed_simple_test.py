#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π PubMed API —Ç–µ—Å—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ Python
"""

import urllib.request
import urllib.parse
import xml.etree.ElementTree as ET
import json
import time

# PubMed API endpoints
ESEARCH_URL = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi"

def search_pubmed_simple(query, retmax=10):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –≤ PubMed –±–µ–∑ requests"""
    # –ö–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = {
        'db': 'pubmed',
        'term': query,
        'retmax': str(retmax),
        'retmode': 'xml'
    }
    
    # –°–æ–∑–¥–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    url = ESEARCH_URL + '?' + urllib.parse.urlencode(params)
    
    try:
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        with urllib.request.urlopen(url) as response:
            content = response.read()
        
        # –ü–∞—Ä—Å–∏–º XML
        root = ET.fromstring(content)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        count_elem = root.find('Count')
        total_count = int(count_elem.text) if count_elem is not None else 0
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞—Ç–µ–π
        id_list = []
        id_list_elem = root.find('IdList')
        if id_list_elem is not None:
            for id_elem in id_list_elem.findall('Id'):
                id_list.append(id_elem.text)
        
        return {
            'total_count': total_count,
            'ids': id_list,
            'query': query
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{query}': {e}")
        return {'total_count': 0, 'ids': [], 'query': query}

def test_supplements():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ë–ê–î–æ–≤ –≤ PubMed"""
    
    supplements = [
        {"name": "–≠—Ö–∏–Ω–∞—Ü–µ—è", "query": 'echinacea AND humans[MeSH]'},
        {"name": "–ì–∏–Ω–∫–≥–æ", "query": 'ginkgo biloba AND humans[MeSH]'},
        {"name": "–ó–≤–µ—Ä–æ–±–æ–π", "query": '"st john\'s wort" AND humans[MeSH]'},
        {"name": "–ñ–µ–Ω—å—à–µ–Ω—å", "query": 'ginseng AND humans[MeSH]'},
        {"name": "–ß–µ—Å–Ω–æ–∫", "query": 'garlic AND humans[MeSH]'},
    ]
    
    results = {}
    
    print("=== –¢–ï–°–¢ PubMed API ===")
    print("–ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ PubMed...\n")
    
    for supplement in supplements:
        print(f"–ü–æ–∏—Å–∫: {supplement['name']}")
        
        # –û–±—â–∏–π –ø–æ–∏—Å–∫
        general_result = search_pubmed_simple(supplement['query'])
        general_count = general_result['total_count']
        
        # –ü–æ–∏—Å–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        interaction_query = supplement['query'].replace('AND humans[MeSH]', '') + ' AND "drug interactions" AND humans[MeSH]'
        interaction_result = search_pubmed_simple(interaction_query)
        interaction_count = interaction_result['total_count']
        
        results[supplement['name']] = {
            'general': {
                'count': general_count,
                'query': supplement['query']
            },
            'interactions': {
                'count': interaction_count,
                'query': interaction_query
            }
        }
        
        print(f"  –û–±—â–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {general_count}")
        print(f"  –û –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö: {interaction_count}")
        print()
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(0.5)
    
    return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    results = test_supplements()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('real_pubmed_data.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print("=== –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó PubMed ===")
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ –ë–ê–î–∞–º:\n")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    sorted_supplements = sorted(
        results.items(), 
        key=lambda x: x[1]['general']['count'], 
        reverse=True
    )
    
    for name, data in sorted_supplements:
        general_count = data['general']['count']
        interaction_count = data['interactions']['count']
        interaction_percent = round(interaction_count/general_count*100, 1) if general_count > 0 else 0
        
        print(f"{name}:")
        print(f"  üìä –í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {general_count:,}")
        print(f"  ‚ö†Ô∏è  –û –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö: {interaction_count:,} ({interaction_percent}%)")
        print()
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ real_pubmed_data.json")

if __name__ == "__main__":
    main()