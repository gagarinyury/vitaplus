#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ø-20 –ë–ê–î–æ–≤ —á–µ—Ä–µ–∑ PubMed API
"""

import urllib.request
import urllib.parse
import xml.etree.ElementTree as ET
import json
import time

ESEARCH_URL = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi"
EFETCH_URL = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi"

def search_pubmed(query, retmax=10):
    """–ü–æ–∏—Å–∫ –≤ PubMed"""
    params = {
        'db': 'pubmed',
        'term': query,
        'retmax': str(retmax),
        'retmode': 'xml'
    }
    
    url = ESEARCH_URL + '?' + urllib.parse.urlencode(params)
    
    try:
        with urllib.request.urlopen(url) as response:
            content = response.read()
        
        root = ET.fromstring(content)
        count_elem = root.find('Count')
        total_count = int(count_elem.text) if count_elem is not None else 0
        
        id_list = []
        id_list_elem = root.find('IdList')
        if id_list_elem is not None:
            for id_elem in id_list_elem.findall('Id'):
                id_list.append(id_elem.text)
        
        return {'total_count': total_count, 'ids': id_list}
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return {'total_count': 0, 'ids': []}

def get_abstracts(pmids):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–æ–≤"""
    if not pmids:
        return []
    
    params = {
        'db': 'pubmed',
        'id': ','.join(pmids[:3]),  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
        'retmode': 'xml'
    }
    
    url = EFETCH_URL + '?' + urllib.parse.urlencode(params)
    
    try:
        with urllib.request.urlopen(url) as response:
            content = response.read()
        
        root = ET.fromstring(content)
        abstracts = []
        
        for article in root.findall('.//PubmedArticle'):
            title_elem = article.find('.//ArticleTitle')
            abstract_elem = article.find('.//AbstractText')
            year_elem = article.find('.//PubDate/Year')
            pmid_elem = article.find('.//PMID')
            
            if title_elem is not None and abstract_elem is not None:
                abstracts.append({
                    'pmid': pmid_elem.text if pmid_elem is not None else '',
                    'title': title_elem.text or '',
                    'abstract': abstract_elem.text or '',
                    'year': year_elem.text if year_elem is not None else ''
                })
        
        return abstracts
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–æ–≤: {e}")
        return []

def analyze_supplement(name, search_terms):
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ë–ê–î–∞"""
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {name}...")
    
    results = {'name': name, 'search_terms': search_terms}
    
    # 1. –û–±—â–∏–π –ø–æ–∏—Å–∫
    general_query = f"({' OR '.join(search_terms)}) AND humans[MeSH]"
    general_result = search_pubmed(general_query)
    results['general'] = {
        'count': general_result['total_count'],
        'query': general_query
    }
    
    # 2. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏
    interaction_query = f"({' OR '.join(search_terms)}) AND (drug interactions[MeSH] OR herb-drug interactions[tw]) AND humans[MeSH]"
    interaction_result = search_pubmed(interaction_query)
    results['interactions'] = {
        'count': interaction_result['total_count'],
        'query': interaction_query
    }
    
    # 3. –ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    adverse_query = f"({' OR '.join(search_terms)}) AND (adverse effects[MeSH] OR side effects[tw]) AND humans[MeSH]"
    adverse_result = search_pubmed(adverse_query)
    results['adverse_effects'] = {
        'count': adverse_result['total_count'],
        'query': adverse_query
    }
    
    # 4. –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
    rct_query = f"({' OR '.join(search_terms)}) AND (randomized controlled trial[pt] OR clinical trial[pt]) AND humans[MeSH]"
    rct_result = search_pubmed(rct_query)
    results['clinical_trials'] = {
        'count': rct_result['total_count'],
        'query': rct_query
    }
    
    # 5. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∞–±—Å—Ç—Ä–∞–∫—Ç–æ–≤ –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö
    if interaction_result['ids']:
        interaction_abstracts = get_abstracts(interaction_result['ids'])
        results['sample_interactions'] = interaction_abstracts
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    total = results['general']['count']
    if total > 0:
        results['interaction_percentage'] = round(results['interactions']['count'] / total * 100, 1)
        results['adverse_percentage'] = round(results['adverse_effects']['count'] / total * 100, 1)
        results['rct_percentage'] = round(results['clinical_trials']['count'] / total * 100, 1)
    
    print(f"  üìä –í—Å–µ–≥–æ: {total:,}")
    print(f"  ‚ö†Ô∏è  –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {results['interactions']['count']:,} ({results.get('interaction_percentage', 0)}%)")
    print(f"  üö® –ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: {results['adverse_effects']['count']:,} ({results.get('adverse_percentage', 0)}%)")
    print(f"  üß™ –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è: {results['clinical_trials']['count']:,} ({results.get('rct_percentage', 0)}%)")
    
    time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    return results

def main():
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ–ø-20 –ë–ê–î–æ–≤"""
    
    supplements = [
        {"name": "–ñ–µ–Ω—å—à–µ–Ω—å", "terms": ["ginseng", "panax ginseng", "panax quinquefolius"]},
        {"name": "–ß–µ—Å–Ω–æ–∫", "terms": ["garlic", "allium sativum"]},
        {"name": "–ì–∏–Ω–∫–≥–æ", "terms": ["ginkgo", "ginkgo biloba"]},
        {"name": "–ó–≤–µ—Ä–æ–±–æ–π", "terms": ["st john's wort", "hypericum perforatum"]},
        {"name": "–≠—Ö–∏–Ω–∞—Ü–µ—è", "terms": ["echinacea", "echinacea purpurea"]},
        {"name": "–ö—É—Ä–∫—É–º–∞", "terms": ["turmeric", "curcuma longa", "curcumin"]},
        {"name": "–ú–æ–ª–æ—á–Ω—ã–π —á–µ—Ä—Ç–æ–ø–æ–ª–æ—Ö", "terms": ["milk thistle", "silybum marianum", "silymarin"]},
        {"name": "–ó–µ–ª–µ–Ω—ã–π —á–∞–π", "terms": ["green tea", "camellia sinensis", "EGCG"]},
        {"name": "–ü–∞–ª—å–º–µ—Ç—Ç–æ", "terms": ["saw palmetto", "serenoa repens"]},
        {"name": "–ê—à–≤–∞–≥–∞–Ω–¥—Ö–∞", "terms": ["ashwagandha", "withania somnifera"]},
        {"name": "–í–∞–ª–µ—Ä–∏–∞–Ω–∞", "terms": ["valerian", "valeriana officinalis"]},
        {"name": "–ò–º–±–∏—Ä—å", "terms": ["ginger", "zingiber officinale"]},
        {"name": "–ê–ª–æ—ç", "terms": ["aloe vera", "aloe barbadensis"]},
        {"name": "–ñ–µ–Ω—å—à–µ–Ω—å —Å–∏–±–∏—Ä—Å–∫–∏–π", "terms": ["eleuthero", "eleutherococcus"]},
        {"name": "–ö–ª—é–∫–≤–∞", "terms": ["cranberry", "vaccinium macrocarpon"]},
    ]
    
    print("=== –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ë–ê–î–æ–≤ —á–µ—Ä–µ–∑ PubMed API ===")
    
    all_results = []
    
    for supplement in supplements:
        try:
            result = analyze_supplement(supplement['name'], supplement['terms'])
            all_results.append(result)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å {supplement['name']}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('full_pubmed_analysis.json', 'w', encoding='utf-8') as f:
        json.dump(all_results, f, ensure_ascii=False, indent=2)
    
    # –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏
    print("\n" + "="*50)
    print("üìä –†–ï–ô–¢–ò–ù–ì–ò –ü–û –†–ï–ê–õ–¨–ù–´–ú –î–ê–ù–ù–´–ú PubMed")
    print("="*50)
    
    # –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    print("\nüèÜ –¢–û–ü-10 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π:")
    sorted_by_total = sorted(all_results, key=lambda x: x['general']['count'], reverse=True)
    for i, item in enumerate(sorted_by_total[:10], 1):
        print(f"{i:2d}. {item['name']}: {item['general']['count']:,} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
    
    # –¢–æ–ø –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    print("\n‚ö†Ô∏è  –¢–û–ü-10 –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:")
    sorted_by_interactions = sorted(all_results, key=lambda x: x.get('interaction_percentage', 0), reverse=True)
    for i, item in enumerate(sorted_by_interactions[:10], 1):
        total = item['general']['count']
        interactions = item['interactions']['count']
        percent = item.get('interaction_percentage', 0)
        print(f"{i:2d}. {item['name']}: {percent}% ({interactions:,} –∏–∑ {total:,})")
    
    print(f"\n‚úÖ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ full_pubmed_analysis.json")

if __name__ == "__main__":
    main()